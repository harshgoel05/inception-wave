import { Component, Input, Output, HostListener, forwardRef, NgZone, EventEmitter, ViewChild, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const callback = () => {
};
/** @type {?} */
const CUSTOM_INPUT = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => JwBootstrapSwitchNg2Component),
    multi: true
};
class JwBootstrapSwitchNg2Component {
    /**
     * @param {?} ngZone
     */
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.handleWidth = 0;
        this.labelWidth = 0;
        this.labelText = '';
        this.inverse = false;
        this.baseClass = 'bootstrap-switch';
        this.onText = 'ON';
        this.offText = 'OFF';
        this.disabled = false;
        this.readonly = false;
        this._focused = false;
        this._size = 'normal';
        this._animate = true;
        this._innerAnimate = true;
        this._indeterminate = false;
        this._onColor = 'primary';
        this._offColor = 'default';
        this._wrapperClass = 'wrapper';
        this._innerState = false;
        this._innerHandleWidth = 'auto';
        this._innerLabelWidth = 'auto';
        this._dragStart = null;
        this._dragEnd = null;
        this._onTouchedCallback = callback;
        this._onChangeCallback = callback;
        this.changeState = new EventEmitter();
    }
    /**
     * @return {?}
     */
    $on() {
        return this.on.nativeElement;
    }
    /**
     * @return {?}
     */
    $off() {
        return this.off.nativeElement;
    }
    /**
     * @return {?}
     */
    $label() {
        return this.label.nativeElement;
    }
    /**
     * @return {?}
     */
    $container() {
        return this.container.nativeElement;
    }
    /**
     * \@description: Function to set the Classes for the Wrapper Div
     * @return {?} string
     */
    getWrapperClasses() {
        /** @type {?} */
        let output = this.baseClass + ' ' + this.baseClass + '-' + this._wrapperClass;
        if (this._focused) {
            output += ' ' + this.baseClass + '-focused';
        }
        if (this.readonly) {
            output += ' ' + this.baseClass + '-readonly';
        }
        if (this._size != null) {
            output += ' ' + this.baseClass + '-' + this._size;
        }
        if (this._innerState) {
            output += ' ' + this.baseClass + '-on';
        }
        else {
            output += ' ' + this.baseClass + '-off';
        }
        if (this._animate) {
            output += ' ' + this.baseClass + '-animate';
        }
        if (this.disabled) {
            output += ' ' + this.baseClass + '-disabled';
        }
        if (this._indeterminate || this._innerState === null || typeof this._innerState === 'undefined') {
            output += ' ' + this.baseClass + '-indeterminate';
        }
        if (this.inverse) {
            output += ' ' + this.baseClass + '-inverse';
        }
        return output;
    }
    /**
     * \@description Function to set the css classes for #on
     * @return {?} string
     */
    getOnClasses() {
        /** @type {?} */
        let output = this.baseClass + '-handle-on';
        if (this._onColor) {
            output += ' ' + this.baseClass + '-' + this._onColor;
        }
        return output;
    }
    /**
     * \@description Function to set the css classes for #off
     * @return {?} string
     */
    getOffClasses() {
        /** @type {?} */
        let output = this.baseClass + '-handle-off';
        if (this._offColor) {
            output += ' ' + this.baseClass + '-' + this._offColor;
        }
        return output;
    }
    /**
     * \@description Function set the marging of the #label when change the state
     * @return {?} string
     */
    getLabelMarginLeft() {
        /** @type {?} */
        let width = (this.inverse) ? -this.handleWidth : 0;
        if (this._indeterminate || this._innerState === null || typeof this._innerState === 'undefined') {
            width = -(this.handleWidth / 2);
        }
        else if (this._dragEnd) {
            width = this._dragEnd;
        }
        else if (!this._innerState) {
            if (!this.inverse) {
                width = -this.handleWidth;
            }
            else {
                width = 0;
            }
        }
        return width + 'px';
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['setLabelText'] ||
            changes['setOnText'] ||
            changes['setHandleWidth'] ||
            changes['setLabelWidth'] ||
            changes['setOffText'] ||
            changes['setSize']) {
            this.calculateWith(true);
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.calculateWith();
    }
    /**
     * @return {?}
     */
    onClick() {
        if (!this.disabled && !this.readonly && !this._dragEnd) {
            this.setStateValue(!this._innerState);
        }
        else if (this._dragEnd) {
            this._dragEnd = null;
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onKeyDown(e) {
        if (!e.which || this.disabled || this.readonly) {
            return;
        }
        switch (e.which) {
            case 37:
                e.preventDefault();
                e.stopImmediatePropagation();
                this.setStateValue(false);
                break;
            case 39:
                e.preventDefault();
                e.stopImmediatePropagation();
                this.setStateValue(true);
                break;
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onDragStart(e) {
        if (e.target === this.$label()) {
            if (this._dragStart || this.disabled || this.readonly) {
                return;
            }
            e.preventDefault();
            e.stopPropagation();
            this._dragStart = (e.pageX || e.touches[0].pageX) - parseInt(this.$container().style.marginLeft, 10);
            if (this._animate) {
                this._animate = !this._animate;
            }
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onDragMove(e) {
        if (this._dragStart) {
            e.preventDefault();
            /** @type {?} */
            const difference = (e.pageX || e.touches[0].pageX) - this._dragStart;
            if (difference < -Number(this.handleWidth) || difference > 0) {
                return;
            }
            this._dragEnd = difference;
        }
    }
    /**
     * @param {?} e
     * @param {?=} removeDragEnd
     * @return {?}
     */
    onDragEnd(e, removeDragEnd = false) {
        if (this._dragStart) {
            e.preventDefault();
            e.stopPropagation();
            if (this._dragEnd) {
                /** @type {?} */
                const state = this._dragEnd > -(Number(this.handleWidth) / 2);
                this.setStateValue((this.inverse) ? !state : state);
            }
            this._dragStart = null;
            if (removeDragEnd) {
                this._dragEnd = null;
            }
            if (this._innerAnimate) {
                this._animate = true;
            }
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onTouchStart(e) {
        this.onDragStart(e);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onMouseDown(e) {
        this.onDragStart(e);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onTouchMove(e) {
        this.onDragMove(e);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onMouseMove(e) {
        this.onDragMove(e);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onMouseUp(e) {
        this.onDragEnd(e);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onTouchEnd(e) {
        this.onDragEnd(e, true);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onMouseLeave(e) {
        this.onDragEnd(e, true);
    }
    /**
     * @return {?}
     */
    onFocus() {
        this._focused = true;
    }
    /**
     * @return {?}
     */
    onBlur() {
        this._focused = false;
        this._onTouchedCallback();
    }
    /**
     * \@description Function to make recalculate the size of the elements when options change
     * @param {?=} disableAnimation
     * @return {?}
     */
    calculateWith(disableAnimation = false) {
        /** @type {?} */
        const self = this;
        if (disableAnimation && this._innerAnimate) {
            this._animate = false;
        }
        setTimeout(() => {
            self.$on().style.width = 'auto';
            self.$off().style.width = 'auto';
            self.$label().style.width = 'auto';
            /** @type {?} */
            const width = (self._innerHandleWidth === 'auto')
                ? Math.max(self.$on().offsetWidth, self.$off().offsetWidth)
                : self._innerHandleWidth;
            if (self.$label().offsetWidth < width) {
                if (self._innerLabelWidth === 'auto') {
                    self.labelWidth = Number(width);
                }
                else {
                    self.labelWidth = Number(self._innerLabelWidth);
                }
            }
            else {
                if (self._innerLabelWidth === 'auto') {
                    self.labelWidth = self.$label().offsetWidth;
                }
                else {
                    self.labelWidth = Number(self._innerLabelWidth);
                }
            }
            self.handleWidth = Number(width);
            self.ngZone.run(() => {
                self.$label().style.width = self.labelWidth + 'px';
                self.$on().style.width = self.handleWidth + 'px';
                self.$off().style.width = self.handleWidth + 'px';
                setTimeout(() => {
                    if (disableAnimation && this._innerAnimate) {
                        this._animate = true;
                    }
                });
            });
        });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setBaseClass(value) {
        this.baseClass = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setWrapperClass(value) {
        this._wrapperClass = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setOffText(value) {
        this.offText = (value) ? value : 'OFF';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setLabelText(value) {
        this.labelText = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setOnText(value) {
        this.onText = (value) ? value : 'ON';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setSize(value) {
        if (value) {
            this._size = value;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setAnimate(value) {
        this._animate = value;
        this._innerAnimate = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setOnColor(value) {
        if (value) {
            this._onColor = value;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setOffColor(value) {
        if (value) {
            this._offColor = value;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setDisabled(value) {
        this.disabled = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setReadOnly(value) {
        this.readonly = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setIndeterminate(value) {
        this._indeterminate = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setInverse(value) {
        this.inverse = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setHandleWidth(value) {
        this._innerHandleWidth = (typeof (value) !== 'undefined') ? value : 'auto';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setLabelWidth(value) {
        this._innerLabelWidth = (typeof (value) !== 'undefined') ? value : 'auto';
    }
    /**
     * @return {?}
     */
    get value() {
        return this._innerState;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v === null || typeof v === 'undefined') {
            this._indeterminate = true;
        }
        this.setStateValue(v);
    }
    /**
     * @param {?} v
     * @return {?}
     */
    setStateValue(v) {
        if (v !== this._innerState) {
            this._onChangeCallback(v);
            this.changeState.emit({
                previousValue: this._innerState,
                currentValue: v
            });
            this._innerState = v;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== this._innerState) {
            this._innerState = value;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouchedCallback = fn;
    }
}
JwBootstrapSwitchNg2Component.decorators = [
    { type: Component, args: [{
                selector: 'bSwitch',
                providers: [CUSTOM_INPUT],
                template: `
      <div class="{{ getWrapperClasses() }}" [style.width]=" (handleWidth  + labelWidth ) +'px'">
          <div #container class="{{ baseClass }}-container"
               [style.width]=" ((handleWidth * 2) + labelWidth) +'px'"
               [style.margin-left]="getLabelMarginLeft()"><!--
              --><span #on [innerHTML]="(inverse) ? offText : onText"
                class="{{ (inverse) ? getOffClasses() : getOnClasses() }}"></span><!--
              --><span #label class="{{ baseClass }}-label">&nbsp;{{ labelText }}</span><!--
              --><span #off [innerHTML]="(inverse) ? onText : offText"
                class="{{ (inverse) ? getOnClasses() : getOffClasses() }}"></span><!--
              --><input type="checkbox" [(ngModel)]="value" [readonly]="readonly" [disabled]="disabled"
                     (focus)="onFocus()" (blur)="onBlur()">
          </div>
      </div>`
            },] },
];
/** @nocollapse */
JwBootstrapSwitchNg2Component.ctorParameters = () => [
    { type: NgZone }
];
JwBootstrapSwitchNg2Component.propDecorators = {
    changeState: [{ type: Output }],
    container: [{ type: ViewChild, args: ['container',] }],
    on: [{ type: ViewChild, args: ['on',] }],
    label: [{ type: ViewChild, args: ['label',] }],
    off: [{ type: ViewChild, args: ['off',] }],
    onClick: [{ type: HostListener, args: ['click',] }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    onTouchStart: [{ type: HostListener, args: ['touchstart', ['$event'],] }],
    onMouseDown: [{ type: HostListener, args: ['mousedown', ['$event'],] }],
    onTouchMove: [{ type: HostListener, args: ['touchmove', ['$event'],] }],
    onMouseMove: [{ type: HostListener, args: ['mousemove', ['$event'],] }],
    onMouseUp: [{ type: HostListener, args: ['mouseup', ['$event'],] }],
    onTouchEnd: [{ type: HostListener, args: ['touchend', ['$event'],] }],
    onMouseLeave: [{ type: HostListener, args: ['mouseleave', ['$event'],] }],
    setBaseClass: [{ type: Input, args: ['switch-base-class',] }],
    setWrapperClass: [{ type: Input, args: ['switch-wrapper-class',] }],
    setOffText: [{ type: Input, args: ['switch-off-text',] }],
    setLabelText: [{ type: Input, args: ['switch-label-text',] }],
    setOnText: [{ type: Input, args: ['switch-on-text',] }],
    setSize: [{ type: Input, args: ['switch-size',] }],
    setAnimate: [{ type: Input, args: ['switch-animate',] }],
    setOnColor: [{ type: Input, args: ['switch-on-color',] }],
    setOffColor: [{ type: Input, args: ['switch-off-color',] }],
    setDisabled: [{ type: Input, args: ['switch-disabled',] }],
    setReadOnly: [{ type: Input, args: ['switch-readonly',] }],
    setIndeterminate: [{ type: Input, args: ['switch-indeterminate',] }],
    setInverse: [{ type: Input, args: ['switch-inverse',] }],
    setHandleWidth: [{ type: Input, args: ['switch-handle-width',] }],
    setLabelWidth: [{ type: Input, args: ['switch-label-width',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class JwBootstrapSwitchNg2Module {
}
JwBootstrapSwitchNg2Module.decorators = [
    { type: NgModule, args: [{
                imports: [
                    FormsModule
                ],
                declarations: [JwBootstrapSwitchNg2Component],
                exports: [JwBootstrapSwitchNg2Component]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { JwBootstrapSwitchNg2Component, JwBootstrapSwitchNg2Module };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,