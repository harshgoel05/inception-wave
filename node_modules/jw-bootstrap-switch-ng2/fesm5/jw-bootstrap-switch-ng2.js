import { Component, Input, Output, HostListener, forwardRef, NgZone, EventEmitter, ViewChild, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var callback = function () {
};
/** @type {?} */
var CUSTOM_INPUT = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return JwBootstrapSwitchNg2Component; }),
    multi: true
};
var JwBootstrapSwitchNg2Component = /** @class */ (function () {
    function JwBootstrapSwitchNg2Component(ngZone) {
        this.ngZone = ngZone;
        this.handleWidth = 0;
        this.labelWidth = 0;
        this.labelText = '';
        this.inverse = false;
        this.baseClass = 'bootstrap-switch';
        this.onText = 'ON';
        this.offText = 'OFF';
        this.disabled = false;
        this.readonly = false;
        this._focused = false;
        this._size = 'normal';
        this._animate = true;
        this._innerAnimate = true;
        this._indeterminate = false;
        this._onColor = 'primary';
        this._offColor = 'default';
        this._wrapperClass = 'wrapper';
        this._innerState = false;
        this._innerHandleWidth = 'auto';
        this._innerLabelWidth = 'auto';
        this._dragStart = null;
        this._dragEnd = null;
        this._onTouchedCallback = callback;
        this._onChangeCallback = callback;
        this.changeState = new EventEmitter();
    }
    /**
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.$on = /**
     * @return {?}
     */
    function () {
        return this.on.nativeElement;
    };
    /**
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.$off = /**
     * @return {?}
     */
    function () {
        return this.off.nativeElement;
    };
    /**
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.$label = /**
     * @return {?}
     */
    function () {
        return this.label.nativeElement;
    };
    /**
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.$container = /**
     * @return {?}
     */
    function () {
        return this.container.nativeElement;
    };
    /**
     * \@description: Function to set the Classes for the Wrapper Div
     * @return {?} string
     */
    JwBootstrapSwitchNg2Component.prototype.getWrapperClasses = /**
     * \@description: Function to set the Classes for the Wrapper Div
     * @return {?} string
     */
    function () {
        /** @type {?} */
        var output = this.baseClass + ' ' + this.baseClass + '-' + this._wrapperClass;
        if (this._focused) {
            output += ' ' + this.baseClass + '-focused';
        }
        if (this.readonly) {
            output += ' ' + this.baseClass + '-readonly';
        }
        if (this._size != null) {
            output += ' ' + this.baseClass + '-' + this._size;
        }
        if (this._innerState) {
            output += ' ' + this.baseClass + '-on';
        }
        else {
            output += ' ' + this.baseClass + '-off';
        }
        if (this._animate) {
            output += ' ' + this.baseClass + '-animate';
        }
        if (this.disabled) {
            output += ' ' + this.baseClass + '-disabled';
        }
        if (this._indeterminate || this._innerState === null || typeof this._innerState === 'undefined') {
            output += ' ' + this.baseClass + '-indeterminate';
        }
        if (this.inverse) {
            output += ' ' + this.baseClass + '-inverse';
        }
        return output;
    };
    /**
     * \@description Function to set the css classes for #on
     * @return {?} string
     */
    JwBootstrapSwitchNg2Component.prototype.getOnClasses = /**
     * \@description Function to set the css classes for #on
     * @return {?} string
     */
    function () {
        /** @type {?} */
        var output = this.baseClass + '-handle-on';
        if (this._onColor) {
            output += ' ' + this.baseClass + '-' + this._onColor;
        }
        return output;
    };
    /**
     * \@description Function to set the css classes for #off
     * @return {?} string
     */
    JwBootstrapSwitchNg2Component.prototype.getOffClasses = /**
     * \@description Function to set the css classes for #off
     * @return {?} string
     */
    function () {
        /** @type {?} */
        var output = this.baseClass + '-handle-off';
        if (this._offColor) {
            output += ' ' + this.baseClass + '-' + this._offColor;
        }
        return output;
    };
    /**
     * \@description Function set the marging of the #label when change the state
     * @return {?} string
     */
    JwBootstrapSwitchNg2Component.prototype.getLabelMarginLeft = /**
     * \@description Function set the marging of the #label when change the state
     * @return {?} string
     */
    function () {
        /** @type {?} */
        var width = (this.inverse) ? -this.handleWidth : 0;
        if (this._indeterminate || this._innerState === null || typeof this._innerState === 'undefined') {
            width = -(this.handleWidth / 2);
        }
        else if (this._dragEnd) {
            width = this._dragEnd;
        }
        else if (!this._innerState) {
            if (!this.inverse) {
                width = -this.handleWidth;
            }
            else {
                width = 0;
            }
        }
        return width + 'px';
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['setLabelText'] ||
            changes['setOnText'] ||
            changes['setHandleWidth'] ||
            changes['setLabelWidth'] ||
            changes['setOffText'] ||
            changes['setSize']) {
            this.calculateWith(true);
        }
    };
    /**
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.calculateWith();
    };
    /**
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (!this.disabled && !this.readonly && !this._dragEnd) {
            this.setStateValue(!this._innerState);
        }
        else if (this._dragEnd) {
            this._dragEnd = null;
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onKeyDown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!e.which || this.disabled || this.readonly) {
            return;
        }
        switch (e.which) {
            case 37:
                e.preventDefault();
                e.stopImmediatePropagation();
                this.setStateValue(false);
                break;
            case 39:
                e.preventDefault();
                e.stopImmediatePropagation();
                this.setStateValue(true);
                break;
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onDragStart = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.target === this.$label()) {
            if (this._dragStart || this.disabled || this.readonly) {
                return;
            }
            e.preventDefault();
            e.stopPropagation();
            this._dragStart = (e.pageX || e.touches[0].pageX) - parseInt(this.$container().style.marginLeft, 10);
            if (this._animate) {
                this._animate = !this._animate;
            }
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onDragMove = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this._dragStart) {
            e.preventDefault();
            /** @type {?} */
            var difference = (e.pageX || e.touches[0].pageX) - this._dragStart;
            if (difference < -Number(this.handleWidth) || difference > 0) {
                return;
            }
            this._dragEnd = difference;
        }
    };
    /**
     * @param {?} e
     * @param {?=} removeDragEnd
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onDragEnd = /**
     * @param {?} e
     * @param {?=} removeDragEnd
     * @return {?}
     */
    function (e, removeDragEnd) {
        if (removeDragEnd === void 0) { removeDragEnd = false; }
        if (this._dragStart) {
            e.preventDefault();
            e.stopPropagation();
            if (this._dragEnd) {
                /** @type {?} */
                var state = this._dragEnd > -(Number(this.handleWidth) / 2);
                this.setStateValue((this.inverse) ? !state : state);
            }
            this._dragStart = null;
            if (removeDragEnd) {
                this._dragEnd = null;
            }
            if (this._innerAnimate) {
                this._animate = true;
            }
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onTouchStart = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.onDragStart(e);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onMouseDown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.onDragStart(e);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onTouchMove = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.onDragMove(e);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onMouseMove = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.onDragMove(e);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onMouseUp = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.onDragEnd(e);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onTouchEnd = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.onDragEnd(e, true);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onMouseLeave = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.onDragEnd(e, true);
    };
    /**
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onFocus = /**
     * @return {?}
     */
    function () {
        this._focused = true;
    };
    /**
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        this._focused = false;
        this._onTouchedCallback();
    };
    /**
     * \@description Function to make recalculate the size of the elements when options change
     * @param {?=} disableAnimation
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.calculateWith = /**
     * \@description Function to make recalculate the size of the elements when options change
     * @param {?=} disableAnimation
     * @return {?}
     */
    function (disableAnimation) {
        var _this = this;
        if (disableAnimation === void 0) { disableAnimation = false; }
        /** @type {?} */
        var self = this;
        if (disableAnimation && this._innerAnimate) {
            this._animate = false;
        }
        setTimeout(function () {
            self.$on().style.width = 'auto';
            self.$off().style.width = 'auto';
            self.$label().style.width = 'auto';
            /** @type {?} */
            var width = (self._innerHandleWidth === 'auto')
                ? Math.max(self.$on().offsetWidth, self.$off().offsetWidth)
                : self._innerHandleWidth;
            if (self.$label().offsetWidth < width) {
                if (self._innerLabelWidth === 'auto') {
                    self.labelWidth = Number(width);
                }
                else {
                    self.labelWidth = Number(self._innerLabelWidth);
                }
            }
            else {
                if (self._innerLabelWidth === 'auto') {
                    self.labelWidth = self.$label().offsetWidth;
                }
                else {
                    self.labelWidth = Number(self._innerLabelWidth);
                }
            }
            self.handleWidth = Number(width);
            self.ngZone.run(function () {
                self.$label().style.width = self.labelWidth + 'px';
                self.$on().style.width = self.handleWidth + 'px';
                self.$off().style.width = self.handleWidth + 'px';
                setTimeout(function () {
                    if (disableAnimation && _this._innerAnimate) {
                        _this._animate = true;
                    }
                });
            });
        });
    };
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setBaseClass", {
        // Functions to set inputs and the private variables of the Switch
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.baseClass = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setWrapperClass", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._wrapperClass = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setOffText", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.offText = (value) ? value : 'OFF';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setLabelText", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.labelText = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setOnText", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.onText = (value) ? value : 'ON';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setSize", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this._size = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setAnimate", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._animate = value;
            this._innerAnimate = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setOnColor", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this._onColor = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setOffColor", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this._offColor = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setDisabled", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.disabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setReadOnly", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.readonly = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setIndeterminate", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._indeterminate = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setInverse", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.inverse = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setHandleWidth", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._innerHandleWidth = (typeof (value) !== 'undefined') ? value : 'auto';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "setLabelWidth", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._innerLabelWidth = (typeof (value) !== 'undefined') ? value : 'auto';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JwBootstrapSwitchNg2Component.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._innerState;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v === null || typeof v === 'undefined') {
                this._indeterminate = true;
            }
            this.setStateValue(v);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} v
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.setStateValue = /**
     * @param {?} v
     * @return {?}
     */
    function (v) {
        if (v !== this._innerState) {
            this._onChangeCallback(v);
            this.changeState.emit({
                previousValue: this._innerState,
                currentValue: v
            });
            this._innerState = v;
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== this._innerState) {
            this._innerState = value;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChangeCallback = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    JwBootstrapSwitchNg2Component.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouchedCallback = fn;
    };
    JwBootstrapSwitchNg2Component.decorators = [
        { type: Component, args: [{
                    selector: 'bSwitch',
                    providers: [CUSTOM_INPUT],
                    template: "\n      <div class=\"{{ getWrapperClasses() }}\" [style.width]=\" (handleWidth  + labelWidth ) +'px'\">\n          <div #container class=\"{{ baseClass }}-container\"\n               [style.width]=\" ((handleWidth * 2) + labelWidth) +'px'\"\n               [style.margin-left]=\"getLabelMarginLeft()\"><!--\n              --><span #on [innerHTML]=\"(inverse) ? offText : onText\"\n                class=\"{{ (inverse) ? getOffClasses() : getOnClasses() }}\"></span><!--\n              --><span #label class=\"{{ baseClass }}-label\">&nbsp;{{ labelText }}</span><!--\n              --><span #off [innerHTML]=\"(inverse) ? onText : offText\"\n                class=\"{{ (inverse) ? getOnClasses() : getOffClasses() }}\"></span><!--\n              --><input type=\"checkbox\" [(ngModel)]=\"value\" [readonly]=\"readonly\" [disabled]=\"disabled\"\n                     (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n          </div>\n      </div>"
                },] },
    ];
    /** @nocollapse */
    JwBootstrapSwitchNg2Component.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    JwBootstrapSwitchNg2Component.propDecorators = {
        changeState: [{ type: Output }],
        container: [{ type: ViewChild, args: ['container',] }],
        on: [{ type: ViewChild, args: ['on',] }],
        label: [{ type: ViewChild, args: ['label',] }],
        off: [{ type: ViewChild, args: ['off',] }],
        onClick: [{ type: HostListener, args: ['click',] }],
        onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
        onTouchStart: [{ type: HostListener, args: ['touchstart', ['$event'],] }],
        onMouseDown: [{ type: HostListener, args: ['mousedown', ['$event'],] }],
        onTouchMove: [{ type: HostListener, args: ['touchmove', ['$event'],] }],
        onMouseMove: [{ type: HostListener, args: ['mousemove', ['$event'],] }],
        onMouseUp: [{ type: HostListener, args: ['mouseup', ['$event'],] }],
        onTouchEnd: [{ type: HostListener, args: ['touchend', ['$event'],] }],
        onMouseLeave: [{ type: HostListener, args: ['mouseleave', ['$event'],] }],
        setBaseClass: [{ type: Input, args: ['switch-base-class',] }],
        setWrapperClass: [{ type: Input, args: ['switch-wrapper-class',] }],
        setOffText: [{ type: Input, args: ['switch-off-text',] }],
        setLabelText: [{ type: Input, args: ['switch-label-text',] }],
        setOnText: [{ type: Input, args: ['switch-on-text',] }],
        setSize: [{ type: Input, args: ['switch-size',] }],
        setAnimate: [{ type: Input, args: ['switch-animate',] }],
        setOnColor: [{ type: Input, args: ['switch-on-color',] }],
        setOffColor: [{ type: Input, args: ['switch-off-color',] }],
        setDisabled: [{ type: Input, args: ['switch-disabled',] }],
        setReadOnly: [{ type: Input, args: ['switch-readonly',] }],
        setIndeterminate: [{ type: Input, args: ['switch-indeterminate',] }],
        setInverse: [{ type: Input, args: ['switch-inverse',] }],
        setHandleWidth: [{ type: Input, args: ['switch-handle-width',] }],
        setLabelWidth: [{ type: Input, args: ['switch-label-width',] }]
    };
    return JwBootstrapSwitchNg2Component;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var JwBootstrapSwitchNg2Module = /** @class */ (function () {
    function JwBootstrapSwitchNg2Module() {
    }
    JwBootstrapSwitchNg2Module.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        FormsModule
                    ],
                    declarations: [JwBootstrapSwitchNg2Component],
                    exports: [JwBootstrapSwitchNg2Component]
                },] },
    ];
    return JwBootstrapSwitchNg2Module;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { JwBootstrapSwitchNg2Component, JwBootstrapSwitchNg2Module };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,